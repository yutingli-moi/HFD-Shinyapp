library(HMDHFDplus)                              #"Reading Human Fertility Database into R" by Timothy L. M. Riffe
library(dplyr)
library(tidyr)
#Edit version: 06.09.2024####
#Auto-grab tool for HFD
#install packages if you have not
#install.packages("remotes", "HMDHFDplus" )
####update package, current HMDHFDplus version: 2.0.5
#library(remotes)
#install_github("timriffe/TR1/TR1/HMDHFDplus")    #through this github repository to get more often up-to-date HFD data
library(HMDHFDplus)                              #"Reading Human Fertility Database into R" by Timothy L. M. Riffe
library(dplyr)
library(tidyr)
rm(list = ls())
current_dir <- getwd()                           #get current folder path
setwd(current_dir)                               #set current path as working directory
username <-"yutili@utu.fi"                       #HMDHFDplus requires username and password of HFD to load data
password <- "19970728Lyt."
log_file <- "update_log.txt"                     #set log's directory
# a function to append log files
log_message <- function(message) {
timestamp <- Sys.time()
full_message <- paste0("[", timestamp, "] ", message, "\n")
cat(full_message, file = log_file, append = TRUE)
}
log_message("Start data update from HFD")        #Start log
# read country names from HFD, and exclude several regions/countries
hfd_country <- getHFDcountries() %>%
filter(!Country %in% c("East Germany", "West Germany", "England and Wales", "Northern Ireland", "Scotland")) %>%
mutate(adjtfr_CNTRY = ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE",
"DEUTNP",  "DNK", "ESP", "EST", "FIN",
"GBR_NP", "HRV", "HUN", "IRL", "ISL",
"ITA", "JPN", "KOR", "LTU", "NLD", "NOR", "POL", "PRT",
"RUS", "SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA)) %>%
mutate(mab_CNTRY=ifelse(CNTRY %in% c("AUT", "BLR", "BEL",	"BGR", "CAN","CHL", "HRV","CZE", "DNK", "EST", "FIN",
"DEUTNP","HUN", "ISL","IRL", "ITA", "JPN", "LTU", "NLD", "NOR","POL","PRT","KOR",
"RUS",	"SVK","SVN","ESP","SWE","CHE","TWN","GBR_NP", "UKR","USA"), CNTRY, NA)) %>%
mutate(ccf_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CZE", "DEUTNP", "DNK", "ESP",
"EST", "FIN", "FRATNP", "GBR_NP", "HUN", "IRL", "ISL", "ITA", "JPN",
"LTU", "NLD", "NOR", "POL", "PRT", "RUS", "SVK", "SVN", "SWE", "TWN",
"UKR", "USA"), CNTRY, NA)) %>%
mutate(parity_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE", "DNK", "ESP", "EST", "FIN", "HRV",
"HUN", "IRL", "ISL", "ITA", "JPN", "KOR", "LTU", "NLD", "NOR", "POL", "PRT", "RUS",
"SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA)) %>%
mutate(asfr_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE", "DEUTNP", "DNK",
"ESP", "EST", "FIN", "FRATNP", "GBR_NP", "HRV", "HUN", "IRL", "ISL", "ITA", "JPN", "KOR", "LTU",
"NLD", "NOR", "POL", "PRT", "RUS", "SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA))
# Create a list to store data for each country
tfr_list <- vector("list", nrow(hfd_country))
adjtfr_list <- vector("list", nrow(hfd_country))
mab1_list <- vector("list", nrow(hfd_country))
ccf_list <- vector("list", nrow(hfd_country))
parity_list <- vector("list", nrow(hfd_country))
asfr_list <- vector("list", nrow(hfd_country))
# Loop read TFR data through CNTRY codes for all countries
for (i in seq_len(nrow(hfd_country))) {
country_code <- hfd_country$CNTRY[i]
country_name <- hfd_country$Country[i]
TFR_data <- readHFDweb(country_code, "tfrRR", username, password)
TFR_data$country <- country_name
TFR_data$code <- country_code
tfr_list[[i]] <- TFR_data
adjtfr_code <- hfd_country$adjtfr_CNTRY[i]
if (!is.na(adjtfr_code)) {
adjTFR_data <- readHFDweb(adjtfr_code, "adjtfrRR", username, password)
adjTFR_data$country <- country_name
adjTFR_data$code <- country_code
adjtfr_list[[i]] <- adjTFR_data
}
mab_code <- hfd_country$mab_CNTRY[i]
if (!is.na(mab_code)) {
MAB1_data <- readHFDweb(mab_code, "mabRRbo", username, password)
MAB1_data$country <- country_name
MAB1_data$code <- country_code
mab1_list[[i]] <- MAB1_data}
ccf_code <- hfd_country$ccf_CNTRY[i]
if (!is.na(ccf_code)) {
CCF_data <- readHFDweb(ccf_code, "tfrVH", username, password)
CCF_data$country <- country_name
CCF_data$code <- country_code
ccf_list[[i]] <- CCF_data }
parity_code <- hfd_country$parity_CNTRY[i]
if (!is.na(parity_code)) {
PARITY_data <- readHFDweb(mab_code, "cft", username, password, fixup = T)
PARITY_data$country <- country_name
PARITY_data$code <- country_code
parity_list[[i]] <- PARITY_data }
asfr_code <- hfd_country$asfr_CNTRY[i]
if (!is.na(asfr_code)) {
asfr_data <- readHFDweb(mab_code, "asfrTR", username, password, fixup = T)
asfr_data$country <- country_name
asfr_data$code <- country_code
asfr_list[[i]] <- asfr_data }
}
#Edit version: 06.09.2024####
#Auto-grab tool for HFD
#install packages if you have not
#install.packages("remotes", "HMDHFDplus" )
####update package, current HMDHFDplus version: 2.0.5
#library(remotes)
#install_github("timriffe/TR1/TR1/HMDHFDplus")    #through this github repository to get more often up-to-date HFD data
library(HMDHFDplus)                              #"Reading Human Fertility Database into R" by Timothy L. M. Riffe
library(dplyr)
library(tidyr)
rm(list = ls())
current_dir <- getwd()                           #get current folder path
setwd(current_dir)                               #set current path as working directory
username <-"yutili@utu.fi"                       #HMDHFDplus requires username and password of HFD to load data
password <- "19970728Lyt."
log_file <- "update_log.txt"                     #set log's directory
# a function to append log files
log_message <- function(message) {
timestamp <- Sys.time()
full_message <- paste0("[", timestamp, "] ", message, "\n")
cat(full_message, file = log_file, append = TRUE)
}
log_message("Start data update from HFD")        #Start log
# read country names from HFD, and exclude several regions/countries
hfd_country <- getHFDcountries() %>%
filter(!Country %in% c("East Germany", "West Germany", "England and Wales", "Northern Ireland", "Scotland")) %>%
mutate(adjtfr_CNTRY = ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE",
"DEUTNP",  "DNK", "ESP", "EST", "FIN",
"GBR_NP", "HRV", "HUN", "IRL", "ISL",
"ITA", "JPN", "KOR", "LTU", "NLD", "NOR", "POL", "PRT",
"RUS", "SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA)) %>%
mutate(mab_CNTRY=ifelse(CNTRY %in% c("AUT", "BLR", "BEL",	"BGR", "CAN","CHL", "HRV","CZE", "DNK", "EST", "FIN",
"DEUTNP","HUN", "ISL","IRL", "ITA", "JPN", "LTU", "NLD", "NOR","POL","PRT","KOR",
"RUS",	"SVK","SVN","ESP","SWE","CHE","TWN","GBR_NP", "UKR","USA"), CNTRY, NA)) %>%
mutate(ccf_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CZE", "DEUTNP", "DNK", "ESP",
"EST", "FIN", "FRATNP", "GBR_NP", "HUN", "IRL", "ISL", "ITA", "JPN",
"LTU", "NLD", "NOR", "POL", "PRT", "RUS", "SVK", "SVN", "SWE", "TWN",
"UKR", "USA"), CNTRY, NA)) %>%
mutate(parity_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE", "DNK", "ESP", "EST", "FIN", "HRV",
"HUN", "IRL", "ISL", "ITA", "JPN", "KOR", "LTU", "NLD", "NOR", "POL", "PRT", "RUS",
"SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA)) %>%
mutate(asfr_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE", "DEUTNP", "DNK",
"ESP", "EST", "FIN", "FRATNP", "GBR_NP", "HRV", "HUN", "IRL", "ISL", "ITA", "JPN", "KOR", "LTU",
"NLD", "NOR", "POL", "PRT", "RUS", "SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA))
# Create a list to store data for each country
tfr_list <- vector("list", nrow(hfd_country))
adjtfr_list <- vector("list", nrow(hfd_country))
mab1_list <- vector("list", nrow(hfd_country))
ccf_list <- vector("list", nrow(hfd_country))
parity_list <- vector("list", nrow(hfd_country))
asfr_list <- vector("list", nrow(hfd_country))
# Loop read TFR data through CNTRY codes for all countries
for (i in seq_len(nrow(hfd_country))) {
country_code <- hfd_country$CNTRY[i]
country_name <- hfd_country$Country[i]
TFR_data <- readHFDweb(country_code, "tfrRR", username, password)
TFR_data$country <- country_name
TFR_data$code <- country_code
tfr_list[[i]] <- TFR_data
adjtfr_code <- hfd_country$adjtfr_CNTRY[i]
if (!is.na(adjtfr_code)) {
adjTFR_data <- readHFDweb(adjtfr_code, "adjtfrRR", username, password)
adjTFR_data$country <- country_name
adjTFR_data$code <- country_code
adjtfr_list[[i]] <- adjTFR_data
}
mab_code <- hfd_country$mab_CNTRY[i]
if (!is.na(mab_code)) {
MAB1_data <- readHFDweb(mab_code, "mabRRbo", username, password)
MAB1_data$country <- country_name
MAB1_data$code <- country_code
mab1_list[[i]] <- MAB1_data}
ccf_code <- hfd_country$ccf_CNTRY[i]
if (!is.na(ccf_code)) {
CCF_data <- readHFDweb(ccf_code, "tfrVH", username, password)
CCF_data$country <- country_name
CCF_data$code <- country_code
ccf_list[[i]] <- CCF_data }
parity_code <- hfd_country$parity_CNTRY[i]
if (!is.na(parity_code)) {
PARITY_data <- readHFDweb(mab_code, "cft", username, password, fixup = T)
PARITY_data$country <- country_name
PARITY_data$code <- country_code
parity_list[[i]] <- PARITY_data }
asfr_code <- hfd_country$asfr_CNTRY[i]
if (!is.na(asfr_code)) {
asfr_data <- readHFDweb(mab_code, "asfrTR", username, password, fixup = T)
asfr_data$country <- country_name
asfr_data$code <- country_code
asfr_list[[i]] <- asfr_data }
}
#Edit version: 06.09.2024####
#Auto-grab tool for HFD
#install packages if you have not
#install.packages("remotes", "HMDHFDplus" )
####update package, current HMDHFDplus version: 2.0.5
#library(remotes)
#install_github("timriffe/TR1/TR1/HMDHFDplus")    #through this github repository to get more often up-to-date HFD data
library(HMDHFDplus)                              #"Reading Human Fertility Database into R" by Timothy L. M. Riffe
library(dplyr)
library(tidyr)
rm(list = ls())
current_dir <- getwd()                           #get current folder path
setwd(current_dir)                               #set current path as working directory
username <-"yutili@utu.fi"                       #HMDHFDplus requires username and password of HFD to load data
password <- "19970728Lyt."
log_file <- "update_log.txt"                     #set log's directory
# a function to append log files
log_message <- function(message) {
timestamp <- Sys.time()
full_message <- paste0("[", timestamp, "] ", message, "\n")
cat(full_message, file = log_file, append = TRUE)
}
log_message("Start data update from HFD")        #Start log
# read country names from HFD, and exclude several regions/countries
hfd_country <- getHFDcountries() %>%
filter(!Country %in% c("East Germany", "West Germany", "England and Wales", "Northern Ireland", "Scotland")) %>%
mutate(adjtfr_CNTRY = ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE",
"DEUTNP",  "DNK", "ESP", "EST", "FIN",
"GBR_NP", "HRV", "HUN", "IRL", "ISL",
"ITA", "JPN", "KOR", "LTU", "NLD", "NOR", "POL", "PRT",
"RUS", "SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA)) %>%
mutate(mab_CNTRY=ifelse(CNTRY %in% c("AUT", "BLR", "BEL",	"BGR", "CAN","CHL", "HRV","CZE", "DNK", "EST", "FIN",
"DEUTNP","HUN", "ISL","IRL", "ITA", "JPN", "LTU", "NLD", "NOR","POL","PRT","KOR",
"RUS",	"SVK","SVN","ESP","SWE","CHE","TWN","GBR_NP", "UKR","USA"), CNTRY, NA)) %>%
mutate(ccf_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CZE", "DEUTNP", "DNK", "ESP",
"EST", "FIN", "FRATNP", "GBR_NP", "HUN", "IRL", "ISL", "ITA", "JPN",
"LTU", "NLD", "NOR", "POL", "PRT", "RUS", "SVK", "SVN", "SWE", "TWN",
"UKR", "USA"), CNTRY, NA)) %>%
mutate(parity_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE", "DNK", "ESP", "EST", "FIN", "HRV",
"HUN", "IRL", "ISL", "ITA", "JPN", "KOR", "LTU", "NLD", "NOR", "POL", "PRT", "RUS",
"SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA)) %>%
mutate(asfr_CNTRY=ifelse(CNTRY %in% c("AUT", "BEL", "BGR", "BLR", "CAN", "CHE", "CHL", "CZE", "DEUTNP", "DNK",
"ESP", "EST", "FIN", "FRATNP", "GBR_NP", "HRV", "HUN", "IRL", "ISL", "ITA", "JPN", "KOR", "LTU",
"NLD", "NOR", "POL", "PRT", "RUS", "SVK", "SVN", "SWE", "TWN", "UKR", "USA"), CNTRY, NA))
# Create a list to store data for each country
tfr_list <- vector("list", nrow(hfd_country))
adjtfr_list <- vector("list", nrow(hfd_country))
mab1_list <- vector("list", nrow(hfd_country))
ccf_list <- vector("list", nrow(hfd_country))
parity_list <- vector("list", nrow(hfd_country))
asfr_list <- vector("list", nrow(hfd_country))
# Loop read TFR data through CNTRY codes for all countries
for (i in seq_len(nrow(hfd_country))) {
country_code <- hfd_country$CNTRY[i]
country_name <- hfd_country$Country[i]
TFR_data <- readHFDweb(country_code, "tfrRR", username, password)
TFR_data$country <- country_name
TFR_data$code <- country_code
tfr_list[[i]] <- TFR_data
adjtfr_code <- hfd_country$adjtfr_CNTRY[i]
if (!is.na(adjtfr_code)) {
adjTFR_data <- readHFDweb(adjtfr_code, "adjtfrRR", username, password)
adjTFR_data$country <- country_name
adjTFR_data$code <- country_code
adjtfr_list[[i]] <- adjTFR_data
}
mab_code <- hfd_country$mab_CNTRY[i]
if (!is.na(mab_code)) {
MAB1_data <- readHFDweb(mab_code, "mabRRbo", username, password)
MAB1_data$country <- country_name
MAB1_data$code <- country_code
mab1_list[[i]] <- MAB1_data}
ccf_code <- hfd_country$ccf_CNTRY[i]
if (!is.na(ccf_code)) {
CCF_data <- readHFDweb(ccf_code, "tfrVH", username, password)
CCF_data$country <- country_name
CCF_data$code <- country_code
ccf_list[[i]] <- CCF_data }
parity_code <- hfd_country$parity_CNTRY[i]
if (!is.na(parity_code)) {
PARITY_data <- readHFDweb(parity_code, "cft", username, password, fixup = T)
PARITY_data$country <- country_name
PARITY_data$code <- country_code
parity_list[[i]] <- PARITY_data }
asfr_code <- hfd_country$asfr_CNTRY[i]
if (!is.na(asfr_code)) {
asfr_data <- readHFDweb(asfr_code, "asfrTR", username, password, fixup = T)
asfr_data$country <- country_name
asfr_data$code <- country_code
asfr_list[[i]] <- asfr_data }
}
tryCatch({
# Combine all data, filtering out NULL values
TFR_data <- bind_rows(tfr_list)
adjTFR_data <- bind_rows(adjtfr_list)
MAB1_data <- bind_rows(mab1_list)
CCF_data <- bind_rows(ccf_list)
asfr_data <- bind_rows(asfr_list)
PARITY_data <- bind_rows(parity_list) %>%
select(country,code,Cohort,x,l0x,l1x,l2x,l3x,l4x) %>%
filter(!is.na(l0x) & !is.na(l1x)) %>%
group_by(code, Cohort, country) %>%
filter(x == max(x)) %>%
summarise(
Childless = l0x / 10000 * 100,
parity1 = l1x / 10000 * 100,
parity2 = l2x / 10000 * 100,
`parity3+` = sum(l3x, l4x, na.rm = TRUE) / 10000 * 100
) %>%
select(code, Cohort, country, Childless, parity1, parity2, `parity3+`)
PARITY_data_long <- PARITY_data %>%
pivot_longer(cols = c(Childless, Childless, parity1, parity2, `parity3+`),
names_to = "parity_type",
values_to = "percentage")
PARITY_data_long$parity_type <- factor(PARITY_data_long$parity_type)
asfr_data <- asfr_data %>%
group_by(country, Year, code) %>%
summarise(
total_ASFR = sum(ASFR, na.rm = TRUE),                               # calculate the total age-specific fertility rate for each country at every year
ASFR_35_above = sum(ASFR[Age >= 35], na.rm = TRUE)) %>%             # ASFR for women aged 35+
mutate(proportion_35_above = (ASFR_35_above / total_ASFR)*100) %>%    # calculate the porpotion of chilren born to women aged 35+
ungroup()
# Save data
save(TFR_data, adjTFR_data, MAB1_data, CCF_data, PARITY_data,PARITY_data_long, asfr_data, file = "01_data/hfd_data.RData")
# Describe the data characteristics
data_list <- list(
TFR_data = "TFR Data",
adjTFR_data = "adjTFR Data",
MAB1_data = "MAB(mean age at first birth) Data",
CCF_data = "CCF(completed cohort fertility) Data",
PARITY_data = "Parity distribution Data",
asfr_data = "Age-specific fertility Data"
)
# Record the updates and statistical information
for (data_name in names(data_list)) {
num_rows <- nrow(get(data_name))
num_cols <- ncol(get(data_name))
log_message(paste(data_list[[data_name]], "update completed: Number of rows =", num_rows, ", Number of columns =", num_cols))
}
})
